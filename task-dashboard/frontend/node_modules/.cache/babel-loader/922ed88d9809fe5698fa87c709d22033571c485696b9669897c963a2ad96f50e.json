{"ast":null,"code":"// import React from 'react';\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1>Task Dashboard</h1>\n//     </div>\n//   );\n// }\n// export default App;\nimport React,{useState}from'react';import Task from'./Task';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[tasks,setTasks]=useState([]);const[taskName,setTaskName]=useState('');const[taskPriority,setTaskPriority]=useState('Low');const addTask=()=>{const newTask={name:taskName,priority:taskPriority};setTasks([...tasks,newTask]);setTaskName('');setTaskPriority('Low');};return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px'},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Task Dashboard\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Task Name\",value:taskName,onChange:e=>setTaskName(e.target.value)}),/*#__PURE__*/_jsxs(\"select\",{value:taskPriority,onChange:e=>setTaskPriority(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"Low\",children:\"Low\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Medium\",children:\"Medium\"}),/*#__PURE__*/_jsx(\"option\",{value:\"High\",children:\"High\"})]}),/*#__PURE__*/_jsx(\"button\",{onClick:addTask,children:\"Add Task\"})]}),/*#__PURE__*/_jsx(\"div\",{children:tasks.map((task,index)=>/*#__PURE__*/_jsx(Task,{task:task},index))})]});}export default App;// Explanation:\n// useState: This is a React hook that allows us to manage the component's state. We use it to keep track of the list of tasks, the name of the task being added, and its priority.\n// addTask: This function adds a new task to the list of tasks. It uses the state values for the task name and priority, then resets the input fields.\n// The Task component is used to display each task.","map":{"version":3,"names":["React","useState","Task","jsx","_jsx","jsxs","_jsxs","App","tasks","setTasks","taskName","setTaskName","taskPriority","setTaskPriority","addTask","newTask","name","priority","style","padding","children","type","placeholder","value","onChange","e","target","onClick","map","task","index"],"sources":["C:/Users/Home/task-dashboard-UI_Frontend/task-dashboard/src/App.js"],"sourcesContent":["// import React from 'react';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1>Task Dashboard</h1>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport Task from './Task';\nimport './App.css';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [taskName, setTaskName] = useState('');\n  const [taskPriority, setTaskPriority] = useState('Low');\n\n  const addTask = () => {\n    const newTask = {\n      name: taskName,\n      priority: taskPriority,\n    };\n    setTasks([...tasks, newTask]);\n    setTaskName('');\n    setTaskPriority('Low');\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Task Dashboard</h1>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Task Name\"\n          value={taskName}\n          onChange={(e) => setTaskName(e.target.value)}\n        />\n        <select\n          value={taskPriority}\n          onChange={(e) => setTaskPriority(e.target.value)}\n        >\n          <option value=\"Low\">Low</option>\n          <option value=\"Medium\">Medium</option>\n          <option value=\"High\">High</option>\n        </select>\n        <button onClick={addTask}>Add Task</button>\n      </div>\n      <div>\n        {tasks.map((task, index) => (\n          <Task key={index} task={task} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// Explanation:\n// useState: This is a React hook that allows us to manage the component's state. We use it to keep track of the list of tasks, the name of the task being added, and its priority.\n// addTask: This function adds a new task to the list of tasks. It uses the state values for the task name and priority, then resets the input fields.\n// The Task component is used to display each task."],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,IAAI,KAAM,QAAQ,CACzB,MAAO,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnB,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACS,QAAQ,CAAEC,WAAW,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACW,YAAY,CAAEC,eAAe,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CAEvD,KAAM,CAAAa,OAAO,CAAGA,CAAA,GAAM,CACpB,KAAM,CAAAC,OAAO,CAAG,CACdC,IAAI,CAAEN,QAAQ,CACdO,QAAQ,CAAEL,YACZ,CAAC,CACDH,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAAEO,OAAO,CAAC,CAAC,CAC7BJ,WAAW,CAAC,EAAE,CAAC,CACfE,eAAe,CAAC,KAAK,CAAC,CACxB,CAAC,CAED,mBACEP,KAAA,QAAKY,KAAK,CAAE,CAAEC,OAAO,CAAE,MAAO,CAAE,CAAAC,QAAA,eAC9BhB,IAAA,OAAAgB,QAAA,CAAI,gBAAc,CAAI,CAAC,cACvBd,KAAA,QAAAc,QAAA,eACEhB,IAAA,UACEiB,IAAI,CAAC,MAAM,CACXC,WAAW,CAAC,WAAW,CACvBC,KAAK,CAAEb,QAAS,CAChBc,QAAQ,CAAGC,CAAC,EAAKd,WAAW,CAACc,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC9C,CAAC,cACFjB,KAAA,WACEiB,KAAK,CAAEX,YAAa,CACpBY,QAAQ,CAAGC,CAAC,EAAKZ,eAAe,CAACY,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAAAH,QAAA,eAEjDhB,IAAA,WAAQmB,KAAK,CAAC,KAAK,CAAAH,QAAA,CAAC,KAAG,CAAQ,CAAC,cAChChB,IAAA,WAAQmB,KAAK,CAAC,QAAQ,CAAAH,QAAA,CAAC,QAAM,CAAQ,CAAC,cACtChB,IAAA,WAAQmB,KAAK,CAAC,MAAM,CAAAH,QAAA,CAAC,MAAI,CAAQ,CAAC,EAC5B,CAAC,cACThB,IAAA,WAAQuB,OAAO,CAAEb,OAAQ,CAAAM,QAAA,CAAC,UAAQ,CAAQ,CAAC,EACxC,CAAC,cACNhB,IAAA,QAAAgB,QAAA,CACGZ,KAAK,CAACoB,GAAG,CAAC,CAACC,IAAI,CAAEC,KAAK,gBACrB1B,IAAA,CAACF,IAAI,EAAa2B,IAAI,CAAEA,IAAK,EAAlBC,KAAoB,CAChC,CAAC,CACC,CAAC,EACH,CAAC,CAEV,CAEA,cAAe,CAAAvB,GAAG,CAElB;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}